 /*
  * The contents of this file are subject to the Mozilla Public
  * License Version 1.1 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of
  * the License at http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS
  * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing
  * rights and limitations under the License.
  *
  * The Original Code is the Bugzilla Testopia Java API.
  *
  * The Initial Developer of the Original Code is Andrew Nelson.
  * Portions created by Andrew Nelson are Copyright (C) 2006
  * Novell. All Rights Reserved.
  *
  * Contributor(s): Andrew Nelson <anelson@novell.com>
  *					Jason Sabin <jsabin@novell.com>
  */
package testopia.API;

import java.util.ArrayList;
import java.util.HashMap;
import org.apache.commons.httpclient.HttpState;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;

/**
 * 
 * @author anelson, bstice 
 * Creates a wrapper class for the TestRunCase
 */
public class TestCaseRun extends TestopiaObject{
	
	private int caseID;
	private int runID;
	private int buildID;
	private int environmentID;
	private Integer caseRunID; 
	
	//checks which constructor is used
	private boolean canUpdate;
		
	//stores the updated value until it's pushed to tesopia with an update
	private StringAttribute notes;
	private IntegerAttribute caseStatus;
	private IntegerAttribute assigneeID;
	private IntegerAttribute build_ID; 
	private IntegerAttribute environment_ID;

	/**
	 * Use this constructor if you just want to use gets
	 * @param userName your bugzilla username
	 * @param password your bugzilla password
	 * @param caseRunID ID generated by bugzilla - can be null
	 * @param url URL - the url of the testopia server that you want to connect to
	 */
	public TestCaseRun(Session session, int caseRunID)
	{
		this.session   = session; 
		this.caseRunID = caseRunID; 
		this.canUpdate = false;
	}
	
	/**
	 * Use this constructor if you want to do sets and gets
	 * @param userName your bugzilla username
	 * @param password your bugzilla password 
	 * @param caseID ID used to get the case
	 * @param runID test run number
	 * @param buildID ID generated by bugzilla
	 * @param environmentID ID generated by bugzilla
	 * @param caseRunID ID generated by bugzilla - can be null
	 * @param url URL - the url of the testopia server that you want to connect to
	 */
	public TestCaseRun(Session session, int caseID,
			int runID, int buildID, int environmentID, Integer caseRunID) 
	{
		this.session = session;
		this.caseID = caseID;
		this.runID = runID; 
		this.buildID = buildID; 
		this.environmentID = environmentID;
		this.caseRunID = caseRunID;
		this.canUpdate = true;
	}
	
	
	
	/**
	 * used to create a testRunCase
	 * @param assigneeID
	 * @param caseRunStatusID
	 * @param caseTextVersion
	 * @return caseRunID
	 * @throws XmlRpcException 
	 * @throws Exception
	 */
	public int makeTestCaseRun(int assigneeID, int caseTextVersion)
	throws TestopiaException, XmlRpcException 
	{
		if (canUpdate == false) 
			throw new TestopiaException(
					"You can't update if you use the 3 parameter constructor, "+
					"you must use the constuctor with 7 parameters");
		
	    //set the values for the test case
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("assignee", assigneeID);
		map.put("case_id", caseID);
		map.put("case_text_version", caseTextVersion);
		map.put("environment_id", environmentID);
		map.put("run_id", runID);
		map.put("build_id", buildID);
				
		return (Integer)callXmlrpcMethod("TestCaseRun.create", map);
		
	}
	
	/**
	 * Updates are not called when the .set is used. You must call update after all your sets
	 * to push the changes over to testopia.
	 * @throws Exception will throw an exception if you used the 3 param constuctor. 
	 */
	public void update()
	throws TestopiaException, XmlRpcException
	{
		if (canUpdate == false)
			throw new TestopiaException(
					"You can't update if you use the 3 parameter constructor, "+
					"you must use the constuctor with 7 parameters");
		
		//hashmap to store attributes to be updated
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		//add attributes that need to be updated to the hashmap 
		if(this.notes.isDirty()){
			map.put("notes", this.notes.get());
			this.notes.clean();
		}
		if(this.caseStatus.isDirty()){
			map.put("case_run_status_id", this.caseStatus.get()); 
			this.caseStatus.clean();
		}
		if(this.assigneeID.isDirty()){
			map.put("assignee", this.assigneeID.get());
			this.assigneeID.get();
		}
		if(this.build_ID.isDirty()){
			map.put("build_id", this.build_ID.get());
			this.build_ID.clean();
		}
		if(this.environment_ID.isDirty()){
			map.put("environment_id", environment_ID);
			this.environment_ID.clean();
		}
		if (map.size() > 0)
			callXmlrpcMethod("TestCaseRun.update",
							 runID,
							 caseID,
							 buildID,
							 environmentID,
							 map);
	}
	
	/**
	 * 
	 * @return a hashMap of all the values found. Returns null if there is an error
	 * and the TestCaseRun cannot be returned
	 * @throws XmlRpcException 
	 */
	@SuppressWarnings("unchecked")
	public HashMap<String, Object> getAttributes()
	throws XmlRpcException
	{
		return (HashMap<String, Object>)callXmlrpcMethod("TestCaseRun.get", caseRunID);
		
	}

	/**
	 * This is used to append a note
	 * @param notes string - the note you want entered into the testCaseRun
	 */
	public void setNotes(String notes)
	{	
		this.notes.set(notes);
	}
	
	/**
	 * This is used to change the testCaseRun status (2 for pass, 3 for fail)
	 * @param status int - the status you want to change the testCaseRun to
	 */
	public void setStatus(int status)
	{
		this.caseStatus.set(status);
	}
	
	/**
	 * Changes the buildID of the testCaseRun
	 * @param buildID int - the new buildID
	 */
	public void setBuildID(int buildID)
	{
		this.build_ID.set(buildID); 
	}
	
	/**
	 * Changes the environmentID of the testCaseRun
	 * @param environmentID int - the number that the environment ID will be changed to
	 */
	public void setEnvironmentID(int environmentID)
	{
		this.environment_ID.set(environmentID);
	}
	
	
	/**
	 * Changes the assigneeID of the testCaseRun
	 * @param assigneeID
	 */
	public void setAssigneeID(int assigneeID)
	{
		this.assigneeID.set(assigneeID); 
	}
	
	/**
	 * @return the caseID
	 */
	public int getCaseID() {
		return caseID;
	}

	/**
	 * @return the runID
	 */
	public int getRunID() {
		return runID;
	}

	/**
	 * @return the buildID
	 */
	public int getBuildID() {
		return buildID;
	}

	/**
	 * @return the environmentID
	 */
	public int getEnvironmentID() {
		return environmentID;
	}

	/**
	 * @return the caseRunID
	 */
	public Integer getCaseRunID() {
		return caseRunID;
	}

	/**
	 * @return the canUpdate
	 */
	public boolean isCanUpdate() {
		return canUpdate;
	}

	/**
	 * @return the notes
	 */
	public String getNotes() {
		return notes.get();
	}

	/**
	 * @return the caseStatus
	 */
	public int getCaseStatus() {
		return caseStatus.get();
	}

	/**
	 * @return the assigneeID
	 */
	public int getAssigneeID() {
		return assigneeID.get();
	}

	/**
	 * @return the build_ID
	 */
	public int getBuild_ID() {
		return build_ID.get();
	}

	/**
	 * @return the environment_ID
	 */
	public int getEnvironment_ID() {
		return environment_ID.get();
	}
}
